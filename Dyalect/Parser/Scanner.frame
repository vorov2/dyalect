-->begin
#nullable disable
#pragma warning disable
using System;
using System.IO;
using System.Collections;
using Buffer = Dyalect.Parser.Constants;
using Map = System.Collections.Generic.Dictionary<int, int>;

-->namespace
namespace Dyalect.Parser
{
    partial class Scanner
    {
-->declarations

        static Scanner()
        {
            start = new Map(128);
-->initialization
        }

        private void NextCh()
        {
            if (oldEols > 0)
            {
                ch = EOL;
                oldEols--;
            }
            else
            {
                pos = buffer.Pos;
                ch = buffer.Read();
                col++;
                charPos++;

                if (ch == '\r' && buffer.Peek() != '\n')
                    ch = EOL;

                if (ch == EOL)
                {
                    line++;
                    col = 0;
                }
            }
-->casing1
        }

        private void AddCh()
        {
            if (tlen >= tval.Length)
            {
                var newBuf = new char[2 * tval.Length];
                Array.Copy(tval, 0, newBuf, 0, tval.Length);
                tval = newBuf;
            }

            if (ch != Constants.EOF)
            {
-->casing2
                NextCh();
            }
        }

-->comments

        private void CheckLiteral()
        {
-->literals
        }

        private Token NextToken()
        {
            var eol = false;
            while (ch == ' ' ||
-->scan1
            )
            {
                if (ch == '\r' || ch == '\n')
                    eol = true;

                NextCh();
            }
-->scan2

            int recKind = noSym;
            int recEnd = pos;
            t = new Token();
            t.pos = pos;
            t.col = col;
            t.line = line;
            t.charPos = charPos;
            t.AfterEol = eol;
            var state = start.ContainsKey(ch) ? (int)start[ch] : 0;
            tlen = 0;
            AddCh();

            switch (state)
            {
                case -1:
                    t.kind = EOFSYM;
                    break;
                case 0:
                    if (recKind != noSym)
                    {
                        tlen = recEnd - t.pos;
                        SetScannerBehindT();
                    }

                    t.kind = recKind;
                    break;
    -->scan3
            }

            t.val = new string(tval, 0, tlen);
            return t;
        }
    }
}
