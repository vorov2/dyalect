//http://rosettacode.org/wiki/Abundant,_deficient_and_perfect_number_classifications#Dyalect
func sieve(bound) {
    var (a, d, p) = (0, 0, 0)
    let sum = Array.Empty(bound + 1, 0)
 
    for divisor in 1..(bound / 2) {
        var i = divisor + divisor
        while i <= bound {
            sum[i] += divisor
            i += divisor
        }
    }
    for i in 1..bound {
        if sum[i] < i {
            d += 1
        } else if sum[i] > i {
            a += 1
        } else {
            p += 1
        }
    }
 
    (abundant: a, deficient: d, perfect: p)
}
 
func division(bound) {
    func Iterator.Where(fn) {
        for x in this when fn(x) {
            yield x
        }
    }
    
    func Iterator.Sum() {
        var sum = 0
        for x in this {
            sum += x
        }
        sum
    }
    
    var (a, d, p) = (0, 0, 0)
    
    for i in 1..200 {
        var sum = ( 1 .. ((i + 1) / 2) )
            .Where(div => div != i && i % div == 0)
            .Sum()
        if sum < i {
            d += 1
        } else if sum > i {
            a += 1
        } else {
            p += 1
        }
    }
 
    (abundant: a, deficient: d, perfect: p)
}

func out(res) {
    print("Abundant: \(res.abundant), Deficient: \(res.deficient), Perfect: \(res.perfect)");
}

out( sieve(200) )
out( division(200) )