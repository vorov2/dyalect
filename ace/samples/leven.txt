//http://rosettacode.org/wiki/Levenshtein_distance#Dyalect
func levenshtein(s, t) {
    let (n, m) = (s.Length(), t.Length())
    let d = Array.Empty(n + 1, () => Array.Empty(m + 1))
 
    return m when n == 0
    return n when m == 0
    
    for i in 0..n {
        d[i][0] = i
    }
 
    for j in 0..m {
        d[0][j] = j
    }

    for j in 1..m {
        for i in 1..n {
            if s[i - 1] == t[j - 1] {
                d[i][j] = d[i - 1][j - 1] //no operation
            }
            else {
                let min1 = min(d[i - 1][j] + 1, d[i][j - 1] + 1) //a deletion
                let min2 = min(min1, d[i - 1][j - 1] + 1) //an insertion
                d[i][j] = min2
            }
        }
    }
 
    d[n][m]
}

func run(x, y) {
    print("\(x) -> \(y) = \(levenshtein(x, y))")
}

run("rosettacode", "raisethysword")