//A simple type that can be used to fetch values from functions
type Option = Some(value) or Nothing()

func Option.hasValue() {
    this is Some()
}

func Option.obtainValue() {
    match this {
        Some(value) => value,
        _ => throw "Option.obtainValue: no value."
    }
}

let val = Option.Some(42)
print(val.obtainValue())

//An implementation of a natural number
type Nat = {
    var value
}

//Type constructor
static func Nat.Nat(value) {
    if value < 0 {
        throw "Nat.Nat: value is less than zero."
    }
    this.ini.value = value
}

//Convert back to integer
func Nat.toInteger() {
    this.ini.value
}

//Extend an integer with this method to unify conversion
func Integer.toInteger() {
    this
}

func Nat +(other) {
    let res = this.ini.value + other.toInteger()
    res < 0 ? res : Nat(res)
}

func Nat -(other) {
    let res = this.ini.value - other.toInteger()
    res < 0 ? res : Nat(res)
}

func Nat == (other) {
    other.toInteger() == this.ini.value
}

func Nat.toString() {
    "Nat(" + this.ini.value + ")"
}

//Testing
let x = Nat(42)
print(x - 12)
print(x - 122)
print(x == Nat(42))
